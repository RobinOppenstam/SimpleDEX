#!/bin/bash

# Extract deployed contract addresses from broadcast files and create .env file
# This script parses the Foundry broadcast JSON files to get actual deployed addresses

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BROADCAST_DIR="$SCRIPT_DIR/broadcast"
ENV_FILE="$SCRIPT_DIR/.env"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  Extracting Contract Addresses${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Function to extract contract address from broadcast file
extract_address() {
    local script_name=$1
    local chain_id=${2:-31337}  # Default to Anvil chain ID
    local contract_name=$3
    local broadcast_file="$BROADCAST_DIR/${script_name}/${chain_id}/run-latest.json"

    if [ ! -f "$broadcast_file" ]; then
        echo -e "${RED}Warning: Broadcast file not found: $broadcast_file${NC}" >&2
        return 1
    fi

    # Extract the first deployed contract address from transactions
    # This assumes the first CREATE transaction is the main contract
    if [ -n "$contract_name" ]; then
        # Try to find by contract name
        address=$(jq -r ".transactions[] | select(.transactionType == \"CREATE\" and .contractName == \"$contract_name\") | .contractAddress" "$broadcast_file" 2>/dev/null | head -1)
    else
        # Get first CREATE transaction
        address=$(jq -r '.transactions[] | select(.transactionType == "CREATE") | .contractAddress' "$broadcast_file" 2>/dev/null | head -1)
    fi

    if [ -z "$address" ] || [ "$address" == "null" ]; then
        return 1
    fi

    echo "$address"
}

# Start building .env file
cat > "$ENV_FILE" << 'EOF'
# SimpleDEX Contract Addresses
# Auto-generated by extract-addresses.sh
# DO NOT EDIT MANUALLY - This file is overwritten on each deployment

# Anvil Default Private Key (DO NOT USE IN PRODUCTION)
PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# RPC URL
RPC_URL=http://localhost:8545

EOF

echo -e "${YELLOW}Core Contracts:${NC}"

# Extract Factory and Router from Deploy.s.sol
FACTORY=$(extract_address "Deploy.s.sol" 31337 "DEXFactory")
ROUTER=$(extract_address "Deploy.s.sol" 31337 "DEXRouter")
TOKEN_A=$(extract_address "Deploy.s.sol" 31337 "MockERC20" | sed -n '1p')
TOKEN_B=$(extract_address "Deploy.s.sol" 31337 "MockERC20" | sed -n '2p')

if [ -n "$FACTORY" ] && [ "$FACTORY" != "null" ]; then
    echo "FACTORY_ADDRESS=$FACTORY" >> "$ENV_FILE"
    echo -e "${GREEN}✓ Factory:  $FACTORY${NC}"
else
    echo -e "${RED}✗ Factory address not found${NC}"
fi

if [ -n "$ROUTER" ] && [ "$ROUTER" != "null" ]; then
    echo "ROUTER_ADDRESS=$ROUTER" >> "$ENV_FILE"
    echo -e "${GREEN}✓ Router:   $ROUTER${NC}"
else
    echo -e "${RED}✗ Router address not found${NC}"
fi

echo "" >> "$ENV_FILE"
echo "# Token Addresses" >> "$ENV_FILE"

# Extract tokens from DeployTokens.s.sol broadcast
echo -e "\n${YELLOW}Token Addresses:${NC}"

# Read the DeployTokens broadcast file and extract addresses in order
TOKENS_FILE="$BROADCAST_DIR/DeployTokens.s.sol/31337/run-latest.json"
if [ -f "$TOKENS_FILE" ]; then
    # Extract all CREATE transactions for MockERC20
    USDC=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '1p')
    USDT=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '2p')
    DAI=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '3p')
    WETH=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '4p')
    WBTC=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '5p')
    LINK=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '6p')
    UNI=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockERC20") | .contractAddress' "$TOKENS_FILE" | sed -n '7p')

    [ -n "$TOKEN_A" ] && echo "TOKEN_A_ADDRESS=$TOKEN_A" >> "$ENV_FILE" && echo -e "${GREEN}✓ Token A: $TOKEN_A${NC}"
    [ -n "$TOKEN_B" ] && echo "TOKEN_B_ADDRESS=$TOKEN_B" >> "$ENV_FILE" && echo -e "${GREEN}✓ Token B: $TOKEN_B${NC}"
    [ -n "$USDC" ] && echo "USDC_ADDRESS=$USDC" >> "$ENV_FILE" && echo -e "${GREEN}✓ mUSDC:   $USDC${NC}"
    [ -n "$USDT" ] && echo "USDT_ADDRESS=$USDT" >> "$ENV_FILE" && echo -e "${GREEN}✓ mUSDT:   $USDT${NC}"
    [ -n "$DAI" ] && echo "DAI_ADDRESS=$DAI" >> "$ENV_FILE" && echo -e "${GREEN}✓ mDAI:    $DAI${NC}"
    [ -n "$WETH" ] && echo "WETH_ADDRESS=$WETH" >> "$ENV_FILE" && echo -e "${GREEN}✓ mWETH:   $WETH${NC}"
    [ -n "$WBTC" ] && echo "WBTC_ADDRESS=$WBTC" >> "$ENV_FILE" && echo -e "${GREEN}✓ mWBTC:   $WBTC${NC}"
    [ -n "$LINK" ] && echo "LINK_ADDRESS=$LINK" >> "$ENV_FILE" && echo -e "${GREEN}✓ mLINK:   $LINK${NC}"
    [ -n "$UNI" ] && echo "UNI_ADDRESS=$UNI" >> "$ENV_FILE" && echo -e "${GREEN}✓ mUNI:    $UNI${NC}"
fi

echo "" >> "$ENV_FILE"
echo "# Chainlink Price Feed Addresses" >> "$ENV_FILE"

echo -e "\n${YELLOW}Price Feed Addresses:${NC}"

# Extract PriceOracle and aggregators from DeployPriceFeeds.s.sol
PRICE_FEEDS_FILE="$BROADCAST_DIR/DeployPriceFeeds.s.sol/31337/run-latest.json"
if [ -f "$PRICE_FEEDS_FILE" ]; then
    # Extract PriceOracle
    PRICE_ORACLE=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "PriceOracle") | .contractAddress' "$PRICE_FEEDS_FILE" | head -1)

    # Extract aggregators in order (7 MockV3Aggregator contracts)
    ETH_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '1p')
    BTC_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '2p')
    LINK_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '3p')
    UNI_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '4p')
    USDC_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '5p')
    USDT_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '6p')
    DAI_AGG=$(jq -r '.transactions[] | select(.transactionType == "CREATE" and .contractName == "MockV3Aggregator") | .contractAddress' "$PRICE_FEEDS_FILE" | sed -n '7p')

    [ -n "$PRICE_ORACLE" ] && echo "PRICE_ORACLE_ADDRESS=$PRICE_ORACLE" >> "$ENV_FILE" && echo -e "${GREEN}✓ PriceOracle:     $PRICE_ORACLE${NC}"
    [ -n "$ETH_AGG" ] && echo "ETH_USD_AGGREGATOR=$ETH_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ ETH/USD:         $ETH_AGG${NC}"
    [ -n "$BTC_AGG" ] && echo "BTC_USD_AGGREGATOR=$BTC_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ BTC/USD:         $BTC_AGG${NC}"
    [ -n "$LINK_AGG" ] && echo "LINK_USD_AGGREGATOR=$LINK_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ LINK/USD:        $LINK_AGG${NC}"
    [ -n "$UNI_AGG" ] && echo "UNI_USD_AGGREGATOR=$UNI_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ UNI/USD:         $UNI_AGG${NC}"
    [ -n "$USDC_AGG" ] && echo "USDC_USD_AGGREGATOR=$USDC_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ USDC/USD:        $USDC_AGG${NC}"
    [ -n "$USDT_AGG" ] && echo "USDT_USD_AGGREGATOR=$USDT_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ USDT/USD:        $USDT_AGG${NC}"
    [ -n "$DAI_AGG" ] && echo "DAI_USD_AGGREGATOR=$DAI_AGG" >> "$ENV_FILE" && echo -e "${GREEN}✓ DAI/USD:         $DAI_AGG${NC}"
fi

echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${GREEN}✓ Addresses extracted to .env${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo -e "  1. Review the .env file: ${GREEN}cat $ENV_FILE${NC}"
echo -e "  2. Update frontend config: ${GREEN}./update-frontend-config.sh${NC}"
echo ""
