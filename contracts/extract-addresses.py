#!/usr/bin/env python3

"""
Extract deployed contract addresses from Foundry broadcast files and create .env file
"""

import json
import os
from pathlib import Path

# Colors for terminal output
class Colors:
    GREEN = '\033[0;32m'
    BLUE = '\033[0;34m'
    YELLOW = '\033[1;33m'
    RED = '\033[0;31m'
    NC = '\033[0m'  # No Color

def extract_addresses_from_broadcast(script_name, chain_id=31337):
    """Extract contract addresses from a broadcast file"""
    broadcast_file = Path(__file__).parent / "broadcast" / script_name / str(chain_id) / "run-latest.json"

    if not broadcast_file.exists():
        print(f"{Colors.RED}Warning: Broadcast file not found: {broadcast_file}{Colors.NC}")
        return []

    try:
        with open(broadcast_file, 'r') as f:
            data = json.load(f)

        addresses = []
        for tx in data.get('transactions', []):
            if tx.get('transactionType') == 'CREATE':
                addresses.append({
                    'address': tx.get('contractAddress'),
                    'name': tx.get('contractName')
                })

        return addresses
    except Exception as e:
        print(f"{Colors.RED}Error reading {broadcast_file}: {e}{Colors.NC}")
        return []

def main():
    import sys

    # Determine chain ID from command line or environment
    chain_id = 31337  # Default to Anvil
    if len(sys.argv) > 1:
        chain_id = int(sys.argv[1])
    elif os.getenv('RPC_URL', '').startswith('https://'):
        chain_id = 11155111  # Sepolia

    network_name = "Sepolia" if chain_id == 11155111 else "Anvil"

    print(f"{Colors.BLUE}========================================{Colors.NC}")
    print(f"{Colors.BLUE}  Extracting Contract Addresses{Colors.NC}")
    print(f"{Colors.BLUE}  Network: {network_name} ({chain_id}){Colors.NC}")
    print(f"{Colors.BLUE}========================================{Colors.NC}")
    print()

    # Prepare .env file
    env_file = Path(__file__).parent / ".env"
    env_content = []

    env_content.append("# SimpleDEX Contract Addresses")
    env_content.append(f"# Auto-generated by extract-addresses.py for {network_name}")
    env_content.append("# Network configuration is preserved across deployments")
    env_content.append("")

    # Try to preserve existing .env content for network keys
    existing_env = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_env[key.strip()] = value.strip()

    # Always include both network configurations (preserve existing values)
    env_content.append("# Anvil (Local Development)")
    env_content.append(f"PRIVATE_KEY={existing_env.get('PRIVATE_KEY', '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80')}")
    env_content.append(f"RPC_URL={existing_env.get('RPC_URL', 'http://localhost:8545')}")
    env_content.append("")
    env_content.append("# Sepolia (Testnet)")
    env_content.append(f"SEPOLIA_RPC_URL={existing_env.get('SEPOLIA_RPC_URL', '')}")
    env_content.append(f"SEPOLIA_PRIVATE_KEY={existing_env.get('SEPOLIA_PRIVATE_KEY', '')}")
    env_content.append(f"ETHERSCAN_API_KEY={existing_env.get('ETHERSCAN_API_KEY', '')}")

    env_content.append("")

    # Extract Factory and Router from Deploy.s.sol
    print(f"{Colors.YELLOW}Core Contracts:{Colors.NC}")
    deploy_addresses = extract_addresses_from_broadcast("Deploy.s.sol", chain_id)

    factory = next((a['address'] for a in deploy_addresses if a['name'] == 'DEXFactory'), None)
    router = next((a['address'] for a in deploy_addresses if a['name'] == 'DEXRouter'), None)
    token_a = next((a['address'] for i, a in enumerate(deploy_addresses) if a['name'] == 'MockERC20' and i == 2), None)
    token_b = next((a['address'] for i, a in enumerate(deploy_addresses) if a['name'] == 'MockERC20' and i == 3), None)

    if factory:
        env_content.append(f"FACTORY_ADDRESS={factory}")
        print(f"{Colors.GREEN}✓ Factory:  {factory}{Colors.NC}")
    else:
        print(f"{Colors.RED}✗ Factory address not found{Colors.NC}")

    if router:
        env_content.append(f"ROUTER_ADDRESS={router}")
        print(f"{Colors.GREEN}✓ Router:   {router}{Colors.NC}")
    else:
        print(f"{Colors.RED}✗ Router address not found{Colors.NC}")

    env_content.append("")
    env_content.append("# Token Addresses")

    # Extract tokens from DeployTokens.s.sol
    print(f"\n{Colors.YELLOW}Token Addresses:{Colors.NC}")
    tokens_addresses = extract_addresses_from_broadcast("DeployTokens.s.sol", chain_id)

    # Filter only MockERC20 tokens
    token_contracts = [a for a in tokens_addresses if a['name'] == 'MockERC20']

    token_names = ['USDC', 'USDT', 'DAI', 'WETH', 'WBTC', 'LINK', 'UNI']

    if token_a:
        env_content.append(f"TOKEN_A_ADDRESS={token_a}")
        print(f"{Colors.GREEN}✓ Token A: {token_a}{Colors.NC}")
    if token_b:
        env_content.append(f"TOKEN_B_ADDRESS={token_b}")
        print(f"{Colors.GREEN}✓ Token B: {token_b}{Colors.NC}")

    for i, (name, token) in enumerate(zip(token_names, token_contracts)):
        if token:
            env_content.append(f"{name}_ADDRESS={token['address']}")
            print(f"{Colors.GREEN}✓ m{name}:   {token['address']}{Colors.NC}")

    env_content.append("")
    env_content.append("# Chainlink Price Feed Addresses")

    # Extract PriceOracle and aggregators
    print(f"\n{Colors.YELLOW}Price Feed Addresses:{Colors.NC}")
    # Try both DeployPriceFeeds (Anvil) and DeployRealPriceFeeds (Sepolia)
    pricefeeds_addresses = extract_addresses_from_broadcast("DeployPriceFeeds.s.sol" if chain_id == 31337 else "DeployRealPriceFeeds.s.sol", chain_id)

    price_oracle = next((a['address'] for a in pricefeeds_addresses if a['name'] == 'PriceOracle'), None)

    if price_oracle:
        env_content.append(f"PRICE_ORACLE_ADDRESS={price_oracle}")
        print(f"{Colors.GREEN}✓ PriceOracle:     {price_oracle}{Colors.NC}")

    # Extract aggregators (7 MockV3Aggregator contracts)
    aggregators = [a['address'] for a in pricefeeds_addresses if a['name'] == 'MockV3Aggregator']
    agg_names = ['ETH_USD', 'BTC_USD', 'LINK_USD', 'UNI_USD', 'USDC_USD', 'USDT_USD', 'DAI_USD']

    for name, agg in zip(agg_names, aggregators):
        if agg:
            env_content.append(f"{name}_AGGREGATOR={agg}")
            print(f"{Colors.GREEN}✓ {name.replace('_', '/')}:         {agg}{Colors.NC}")

    env_content.append("")
    env_content.append("# Token Faucet Address")

    # Extract Faucet
    print(f"\n{Colors.YELLOW}Token Faucet:{Colors.NC}")
    faucet_addresses = extract_addresses_from_broadcast("DeployFaucet.s.sol", chain_id)

    faucet = next((a['address'] for a in faucet_addresses if a['name'] == 'TokenFaucet'), None)

    if faucet:
        env_content.append(f"FAUCET_ADDRESS={faucet}")
        print(f"{Colors.GREEN}✓ TokenFaucet: {faucet}{Colors.NC}")
    else:
        print(f"{Colors.YELLOW}⚠ TokenFaucet not deployed yet{Colors.NC}")

    # Write .env file
    with open(env_file, 'w') as f:
        f.write('\n'.join(env_content) + '\n')

    print()
    print(f"{Colors.BLUE}========================================{Colors.NC}")
    print(f"{Colors.GREEN}✓ Addresses extracted to .env{Colors.NC}")
    print(f"{Colors.BLUE}========================================{Colors.NC}")
    print()
    print(f"{Colors.YELLOW}Next steps:{Colors.NC}")
    print(f"  1. Review the .env file: {Colors.GREEN}cat {env_file}{Colors.NC}")
    print(f"  2. Update frontend config: {Colors.GREEN}python3 update-frontend-config.py{Colors.NC}")
    print()

if __name__ == '__main__':
    main()
